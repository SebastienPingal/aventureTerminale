generator client {
  provider = "prisma-client-js"
  output   = "../src/app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(uuid())
  name          String
  email         String          @unique
  emailVerified DateTime?
  image         String?
  account       Account[]
  session       Session[]
  inventory     Loot[]
  Authenticator Authenticator[]
  journal       JournalEntry[]
  traces        UserTrace[]

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  worldCell   WorldCell? @relation(fields: [worldCellId], references: [id])
  worldCellId String?
}

enum JournalEntryType {
  PROMPT
  RESPONSE
  SYSTEM
  ERROR
}

model JournalEntry {
  id      String           @id @default(uuid())
  content String
  type    JournalEntryType @default(SYSTEM)
  user    User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Loot {
  id          String   @id @default(uuid())
  name        String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  users       User[]
}

model WorldCell {
  id           String      @id @default(uuid())
  x            Int
  y            Int
  mapCharacter String      @db.Char(1)
  rarity       String      @default("commun")
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  description  String
  title        String
  users        User[]
  traces       UserTrace[]

  @@unique([x, y])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model UserTrace {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  worldCellId String
  worldCell   WorldCell @relation(fields: [worldCellId], references: [id], onDelete: Cascade)

  traceType   UserTraceType @default(FOOTPRINT)
  intensity   Int           @default(100)
  volatility  Int           @default(5)
  description String?

  createdAt DateTime @default(now())
  expiresAt DateTime // When this trace disappears

  @@index([worldCellId, expiresAt])
  @@index([userId, createdAt])
}

enum UserTraceType {
  FOOTPRINT
  LOOT
  OTHER
  MESSAGE
}
